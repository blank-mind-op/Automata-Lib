def render_automata(self):

        G = pgv.AGraph(strict=False, directed=True)

        #Adding all the states

        for state in self.states:
            if state in self.accept_states and state == self.initial_states:
                G.add_node(state.get_state_label(), shape='doublecircle',color='red',order=1)
                G.add_node('null', style ='invisible')
                G.add_edge('null', state.get_state_label())
            elif state in self.accept_states:
                G.add_node(state.get_state_label(), shape='doublecircle',color='red',order=len(self.states))
            
            elif state == self.initial_states:
                G.add_node(state.get_state_label(),shape='circle',color='red',order= 1)
                G.add_node('null', style ='invisible')
                G.add_edge('null', state.get_state_label())
            else:
                G.add_node(state.get_state_label(), shape='circle')
            
        #Adding all the transitions

        for transition in self.transitions:
            origin_state = transition.get_tansition_origin_state()
            destination_state = transition.get_transition_destination_state()
            transition_label = transition.get_transition_label()
            G.add_edge(origin_state.get_state_label(), destination_state.get_state_label(), label=transition_label)
            
        #Setting graph attributes

        G.graph_attr['rankdir'] = 'LR'
        G.graph_attr['fontname'] = 'Helvetica,Arial,sans-serif'
        G.node_attr['fontname'] = 'Helvetica,Arial,sans-serif'
        G.edge_attr['fontname'] = 'Helvetica,Arial,sans-serif'

        # Save the graph to a file
        G.graph_attr.update(dpi='300', size='10', nodesep='0.5')
        G.layout(prog='dot')
        G.draw(f"images/{self.get_automata_id()}.png")
        print("Finite state machine graph saved")

        # Display the graph using matplotlib (optional)
        plt.figure(figsize=(8, 6))
        plt.imshow(plt.imread(f'images/{self.get_automata_id()}.png'))
        plt.axis('off')
        plt.show()